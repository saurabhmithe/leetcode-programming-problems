package Arrays.Easy;

import java.util.ArrayList;
import java.util.List;

public class PascalsTriangle {

     /*

     Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.
     In Pascal's triangle, each number is the sum of the two numbers directly above it.

     Example:
     Input: 5
     Output:
     [
                      [1],
                     [1,1],
                    [1,2,1],
                   [1,3,3,1],
                  [1,4,6,4,1]
     ]

     */


    /**
     * The approach I took here was inspired by fibonacci numbers.
     * The first two levels remain the same no matter what. So if n is
     * less than 2, I return the hard-coded levels based on n.
     * A pattern that can be observed here is that on each level, the
     * first and last element is carried over from the previous level.
     * The rest of the elements are generated by adding the i - 1 and i
     * position elements in the previous level.
     * <p>
     * Time Complexity - O(n^2)
     * Space Complexity - O(n^2)
     * <p>
     * Runtime on LeetCode = 1ms
     * Runtime beats 99.87% of Java Submissions
     */
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> finalList = new ArrayList<>();
        if (numRows == 0) return finalList;
        List<Integer> list0 = new ArrayList<>();
        list0.add(1);
        finalList.add(list0);
        if (numRows == 1) return finalList;
        List<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(1);
        finalList.add(list1);
        if (numRows == 2) return finalList;
        for (int i = 2; i < numRows; i++) {
            int prevIdx = i - 1;
            List<Integer> prev = finalList.get(prevIdx);
            List<Integer> newList = new ArrayList<>();
            newList.add(prev.get(0));
            newList.add(prev.get(prev.size() - 1));
            for (int j = 1; j < i; j++) {
                newList.add(j, prev.get(j - 1) + prev.get(j));
            }
            finalList.add(newList);
        }
        return finalList;
    }

}
